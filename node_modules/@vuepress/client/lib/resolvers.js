import { dedupeHead, isArray, isString, resolveLocalePath, } from '@vuepress/shared';
import { reactive } from 'vue';
import { pageDataEmpty, pagesData } from './composables';
/**
 * Resolver methods to get global computed
 *
 * Users can override corresponding method for advanced customization
 */
export const resolvers = reactive({
    /**
     * Resolve page data according to page key
     */
    resolvePageData: async (pageKey) => {
        const pageDataResolver = pagesData.value[pageKey];
        const pageData = await (pageDataResolver === null || pageDataResolver === void 0 ? void 0 : pageDataResolver());
        return pageData !== null && pageData !== void 0 ? pageData : pageDataEmpty;
    },
    /**
     * Resolve page frontmatter from page data
     */
    resolvePageFrontmatter: (pageData) => pageData.frontmatter,
    /**
     * Merge the head config in frontmatter and site locale
     *
     * Frontmatter should take priority over site locale
     */
    resolvePageHead: (headTitle, frontmatter, siteLocale) => {
        const description = isString(frontmatter.description)
            ? frontmatter.description
            : siteLocale.description;
        const head = [
            ...(isArray(frontmatter.head) ? frontmatter.head : []),
            ...siteLocale.head,
            ['title', {}, headTitle],
            ['meta', { name: 'description', content: description }],
        ];
        return dedupeHead(head);
    },
    /**
     * Resolve the content of page head title
     *
     * It would be used as the content of the `<title>` tag
     */
    resolvePageHeadTitle: (page, siteLocale) => `${page.title ? `${page.title} | ` : ``}${siteLocale.title}`,
    /**
     * Resolve page language from page data
     *
     * It would be used as the `lang` attribute of `<html>` tag
     */
    resolvePageLang: (pageData) => pageData.lang || 'en',
    /**
     * Resolve locale path according to route path and locales config
     */
    resolveRouteLocale: (locales, routePath) => resolveLocalePath(locales, routePath),
    /**
     * Resolve site data for specific locale
     *
     * It would merge the locales fields to the root fields
     */
    resolveSiteLocaleData: (site, routeLocale) => ({
        ...site,
        ...site.locales[routeLocale],
    }),
});
