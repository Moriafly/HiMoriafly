"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveTitleFromToken = void 0;
const shared_1 = require("@vuepress/shared");
/**
 * Resolve header title from markdown-it token
 *
 * Typically using the next token of `heading_open` token
 */
const resolveTitleFromToken = (token, { allowHtml, escapeText, }) => {
    var _a;
    // children of the token contains the parsed result of the heading title
    const children = (_a = token.children) !== null && _a !== void 0 ? _a : [];
    // type of tokens to be included in the heading title
    const titleTokenTypes = ['text', 'emoji', 'code_inline'];
    // include 'html_inline' or not
    if (allowHtml) {
        titleTokenTypes.push('html_inline');
    }
    // filter the token type to be included in the title
    const titleTokens = children.filter((item) => {
        var _a;
        return titleTokenTypes.includes(item.type) &&
            // filter permalink symbol that generated by markdown-it-anchor
            !((_a = item.meta) === null || _a === void 0 ? void 0 : _a.isPermalinkSymbol);
    });
    // get title from tokens
    return titleTokens
        .reduce((result, item) => {
        if (escapeText) {
            // escape the content of 'code_inline' and 'text'
            if (item.type === 'code_inline' || item.type === 'text') {
                return `${result}${(0, shared_1.htmlEscape)(item.content)}`;
            }
        }
        // keep the content of 'emoji' and 'html_inline'
        return `${result}${item.content}`;
    }, '')
        .trim();
};
exports.resolveTitleFromToken = resolveTitleFromToken;
