"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codePlugin = void 0;
const resolveHighlightLines_1 = require("./resolveHighlightLines");
const resolveLanguage_1 = require("./resolveLanguage");
const resolveLineNumbers_1 = require("./resolveLineNumbers");
const resolveVPre_1 = require("./resolveVPre");
/**
 * Code plugin
 */
const codePlugin = (md, { highlightLines = true, lineNumbers = true, preWrapper = true, vPre = true, } = {}) => {
    // override default fence renderer
    md.renderer.rules.fence = (tokens, idx, options, env, slf) => {
        var _a, _b, _c;
        const token = tokens[idx];
        // get token info
        const info = token.info ? md.utils.unescapeAll(token.info).trim() : '';
        // resolve language from token info
        const language = (0, resolveLanguage_1.resolveLanguage)(info);
        const languageClass = `${options.langPrefix}${language.name}`;
        // try to get highlighted code
        const code = ((_a = options.highlight) === null || _a === void 0 ? void 0 : _a.call(options, token.content, language.name, '')) ||
            md.utils.escapeHtml(token.content);
        // wrap highlighted code with `<pre>` and `<code>`
        let result = code.startsWith('<pre')
            ? code
            : `<pre class="${languageClass}"><code>${code}</code></pre>`;
        // resolve v-pre mark from token info
        const useVPre = (_b = (0, resolveVPre_1.resolveVPre)(info)) !== null && _b !== void 0 ? _b : vPre;
        if (useVPre) {
            result = `<pre v-pre${result.slice('<pre'.length)}`;
        }
        // if `preWrapper` is disabled, return directly
        if (!preWrapper) {
            return result;
        }
        // code fences always have an ending `\n`, so we should trim the last line
        const lines = code.split('\n').slice(0, -1);
        // resolve highlight line ranges from token info
        const highlightLinesRanges = highlightLines
            ? (0, resolveHighlightLines_1.resolveHighlightLines)(info)
            : null;
        // generate highlight lines
        if (highlightLinesRanges) {
            const highlightLinesCode = lines
                .map((_, index) => {
                if ((0, resolveHighlightLines_1.isHighlightLine)(index + 1, highlightLinesRanges)) {
                    return '<div class="highlight-line">&nbsp;</div>';
                }
                return '<br>';
            })
                .join('');
            result = `${result}<div class="highlight-lines">${highlightLinesCode}</div>`;
        }
        // resolve line-numbers mark from token info
        const useLineNumbers = (_c = (0, resolveLineNumbers_1.resolveLineNumbers)(info)) !== null && _c !== void 0 ? _c : (typeof lineNumbers === 'number'
            ? lines.length >= lineNumbers
            : lineNumbers);
        // generate line numbers
        if (useLineNumbers) {
            // generate line numbers code
            const lineNumbersCode = lines
                .map((_, index) => `<span class="line-number">${index + 1}</span><br>`)
                .join('');
            result = `${result}<div class="line-numbers" aria-hidden="true">${lineNumbersCode}</div>`;
        }
        result = `<div class="${languageClass} ext-${language.ext}${useLineNumbers ? ' line-numbers-mode' : ''}">${result}</div>`;
        return result;
    };
};
exports.codePlugin = codePlugin;
