"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleModuleStyles = void 0;
/**
 * Set webpack module to handle style files
 */
const handleModuleStyles = ({ app, options, config, isBuild, isServer, }) => {
    const createStyleRules = ({ lang, test, }) => {
        const baseRule = config.module.rule(lang).test(test);
        const modulesRule = baseRule.oneOf('modules').resourceQuery(/module/);
        const normalRule = baseRule.oneOf('normal');
        return {
            modulesRule,
            normalRule,
        };
    };
    const applyStyleHandlers = ({ rule, cssModules, loaderName, loaderOptions = {}, }) => {
        if (!isServer) {
            if (isBuild) {
                rule
                    .use('extract-css-loader')
                    .loader(require('mini-css-extract-plugin').loader);
            }
            else {
                rule.use('style-loader').loader(require.resolve('style-loader'));
            }
        }
        // use css-loader
        rule
            .use('css-loader')
            .loader(require.resolve('css-loader'))
            .options({
            modules: cssModules
                ? {
                    localIdentName: `[local]_[contenthash:base64:8]`,
                    exportOnlyLocals: isServer,
                }
                : false,
            importLoaders: 1,
        });
        // use postcss-loader
        rule
            .use('postcss-loader')
            .loader(require.resolve('postcss-loader'))
            .options({
            postcssOptions: {
                plugins: [require('autoprefixer'), require('postcss-csso')],
            },
            ...options.postcss,
        });
        // use extra loader
        if (loaderName) {
            rule.use(loaderName).loader(loaderName).options(loaderOptions);
        }
    };
    const handleStyle = ({ lang, test, loaderName, loaderOptions, }) => {
        const { modulesRule, normalRule } = createStyleRules({
            lang,
            test,
        });
        applyStyleHandlers({
            rule: modulesRule,
            cssModules: true,
            loaderName,
            loaderOptions,
        });
        applyStyleHandlers({
            rule: normalRule,
            cssModules: false,
            loaderName,
            loaderOptions,
        });
    };
    handleStyle({
        lang: 'css',
        test: /\.css$/,
    });
    handleStyle({
        lang: 'postcss',
        test: /\.p(ost)?css$/,
    });
    handleStyle({
        lang: 'scss',
        test: /\.scss$/,
        loaderName: 'sass-loader',
        loaderOptions: options.scss,
    });
    handleStyle({
        lang: 'sass',
        test: /\.sass$/,
        loaderName: 'sass-loader',
        loaderOptions: options.sass,
    });
    handleStyle({
        lang: 'less',
        test: /\.less$/,
        loaderName: 'less-loader',
        loaderOptions: options.less,
    });
    handleStyle({
        lang: 'stylus',
        test: /\.styl(us)?$/,
        loaderName: 'stylus-loader',
        loaderOptions: {
            stylusOptions: {
                // allow literal css import
                includeCSS: true,
                // no need to compress with stylus
                // we will handle it by postcss-loader
                compress: false,
            },
            ...options.stylus,
        },
    });
};
exports.handleModuleStyles = handleModuleStyles;
