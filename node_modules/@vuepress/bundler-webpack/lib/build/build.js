"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const utils_1 = require("@vuepress/utils");
const webpack = require("webpack");
const resolveWebpackConfig_1 = require("../resolveWebpackConfig");
const createClientConfig_1 = require("./createClientConfig");
const createServerConfig_1 = require("./createServerConfig");
const renderPage_1 = require("./renderPage");
const resolveClientManifestMeta_1 = require("./resolveClientManifestMeta");
const build = async (options, app) => {
    // webpack compile
    await (0, utils_1.withSpinner)('Compiling with webpack')(async () => {
        // create webpack config
        const clientConfig = (0, resolveWebpackConfig_1.resolveWebpackConfig)({
            config: await (0, createClientConfig_1.createClientConfig)(app, options),
            options,
            isServer: false,
            isBuild: true,
        });
        const serverConfig = (0, resolveWebpackConfig_1.resolveWebpackConfig)({
            config: await (0, createServerConfig_1.createServerConfig)(app, options),
            options,
            isServer: true,
            isBuild: true,
        });
        await new Promise((resolve, reject) => {
            webpack([clientConfig, serverConfig], (err, stats) => {
                var _a, _b;
                if (err) {
                    reject(err);
                }
                else if (stats === null || stats === void 0 ? void 0 : stats.hasErrors()) {
                    (_a = stats.toJson().errors) === null || _a === void 0 ? void 0 : _a.forEach((err) => {
                        console.error(err);
                    });
                    reject(new Error('Failed to compile with errors'));
                }
                else {
                    if (stats === null || stats === void 0 ? void 0 : stats.hasWarnings()) {
                        (_b = stats.toJson().warnings) === null || _b === void 0 ? void 0 : _b.forEach((warning) => {
                            console.warn(warning);
                        });
                    }
                    resolve();
                }
            });
        });
    });
    // render pages
    await (0, utils_1.withSpinner)('Rendering pages')(async () => {
        // load ssr template file
        const ssrTemplate = (await utils_1.fs.readFile(app.options.templateBuild)).toString();
        // load the client manifest file
        const clientManifestPath = app.dir.dest(createClientConfig_1.clientManifestFilename);
        const clientManifest = require(clientManifestPath);
        // resolve client files meta
        const { allFilesMeta, initialFilesMeta, asyncFilesMeta, moduleFilesMetaMap, } = (0, resolveClientManifestMeta_1.resolveClientManifestMeta)(clientManifest);
        // load the compiled server bundle
        const serverEntryPath = app.dir.dest('.server/app');
        // delete server entry cache to allow building multiple times
        // in the same dest dir
        delete require.cache[serverEntryPath];
        const { createVueApp } = require(serverEntryPath);
        // create vue ssr app
        const { app: vueApp, router: vueRouter } = await createVueApp();
        // pre-render pages to html files
        const spinner = (0, utils_1.ora)();
        for (const page of app.pages) {
            spinner.start(`Rendering pages ${utils_1.chalk.magenta(page.path)}`);
            await (0, renderPage_1.renderPage)({
                app,
                page,
                vueApp,
                vueRouter,
                ssrTemplate,
                allFilesMeta,
                initialFilesMeta,
                asyncFilesMeta,
                moduleFilesMetaMap,
            });
        }
        spinner.stop();
    });
    // keep the server bundle files in debug mode
    if (!app.env.isDebug) {
        // remove server dest directory after pages rendered
        await utils_1.fs.remove(app.dir.dest('.server'));
    }
};
exports.build = build;
