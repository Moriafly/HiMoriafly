"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createServerConfig = void 0;
const config_1 = require("../config");
const createServerConfig = async (app, options) => {
    const isBuild = true;
    const isServer = true;
    const config = await (0, config_1.createBaseConfig)({
        app,
        options,
        isBuild,
        isServer,
    });
    // server output
    // remove after pages rendered
    config.output
        .path(app.dir.dest('.server'))
        .filename('app.js')
        .publicPath(app.options.base)
        .libraryTarget('commonjs2');
    // set target to node
    // vue-loader will use compiler-ssr internally
    config.target('node');
    // set externals
    // externalize vue in ssr mode, because we need to `require('vue')` in node side
    // for ssr usage, then we also need vue as peer-dependency when using pnpm
    config.externals(['vue']);
    // devtool
    config.devtool('source-map');
    // do not need to minimize server bundle
    config.optimization.minimize(false);
    // use internal vuepress-loader to handle SSR dependencies
    config.module
        .rule('vue')
        .test(/\.vue$/)
        .use('vuepress-loader')
        .before('vue-loader')
        .loader(require.resolve('./ssr/vuepressLoader'))
        .end();
    return config;
};
exports.createServerConfig = createServerConfig;
