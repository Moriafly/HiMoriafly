"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPage = void 0;
const inferPagePath_1 = require("./inferPagePath");
const renderPageContent_1 = require("./renderPageContent");
const renderPageExcerpt_1 = require("./renderPageExcerpt");
const resolvePageComponentInfo_1 = require("./resolvePageComponentInfo");
const resolvePageContent_1 = require("./resolvePageContent");
const resolvePageDataInfo_1 = require("./resolvePageDataInfo");
const resolvePageDate_1 = require("./resolvePageDate");
const resolvePageFileContent_1 = require("./resolvePageFileContent");
const resolvePageFilePath_1 = require("./resolvePageFilePath");
const resolvePageFrontmatter_1 = require("./resolvePageFrontmatter");
const resolvePageHtmlInfo_1 = require("./resolvePageHtmlInfo");
const resolvePageKey_1 = require("./resolvePageKey");
const resolvePageLang_1 = require("./resolvePageLang");
const resolvePagePath_1 = require("./resolvePagePath");
const resolvePagePermalink_1 = require("./resolvePagePermalink");
const resolvePageRouteMeta_1 = require("./resolvePageRouteMeta");
const resolvePageSlug_1 = require("./resolvePageSlug");
const createPage = async (app, options) => {
    // plugin hook: extendsPageOptions
    await app.pluginApi.hooks.extendsPageOptions.process(options, app);
    // resolve page file absolute path and relative path
    const { filePath, filePathRelative } = (0, resolvePageFilePath_1.resolvePageFilePath)({
        app,
        options,
    });
    // read the raw file content according to the absolute file path
    const contentRaw = await (0, resolvePageFileContent_1.resolvePageFileContent)({ filePath, options });
    // resolve content & frontmatter & raw excerpt from raw content
    const { content, frontmatterRaw, excerptRaw } = (0, resolvePageContent_1.resolvePageContent)({
        contentRaw,
    });
    // resolve frontmatter from raw frontmatter and page options
    const frontmatter = (0, resolvePageFrontmatter_1.resolvePageFrontmatter)({ frontmatterRaw, options });
    // render excerpt
    const excerpt = (0, renderPageExcerpt_1.renderPageExcerpt)({
        app,
        excerptRaw,
        filePath,
        filePathRelative,
        frontmatter,
    });
    // render page content and extract information
    const { contentRendered, deps, headers, hoistedTags, links, title } = await (0, renderPageContent_1.renderPageContent)({
        app,
        content,
        filePath,
        filePathRelative,
        frontmatter,
    });
    // resolve route meta from frontmatter
    const routeMeta = (0, resolvePageRouteMeta_1.resolvePageRouteMeta)({ frontmatter });
    // resolve slug from file path
    const slug = (0, resolvePageSlug_1.resolvePageSlug)({ filePathRelative });
    // resolve date from file path
    const date = (0, resolvePageDate_1.resolvePageDate)({ frontmatter, filePathRelative });
    // infer page path according to file path
    const { pathInferred, pathLocale } = (0, inferPagePath_1.inferPagePath)({ app, filePathRelative });
    // resolve language from frontmatter and site options
    const lang = (0, resolvePageLang_1.resolvePageLang)({ app, frontmatter, pathLocale });
    // resolve page permalink
    const permalink = (0, resolvePagePermalink_1.resolvePagePermalink)({
        frontmatter,
        slug,
        date,
        pathInferred,
        pathLocale,
    });
    // resolve page path
    const path = (0, resolvePagePath_1.resolvePagePath)({ permalink, pathInferred, options });
    // resolve page key
    const key = (0, resolvePageKey_1.resolvePageKey)({ path });
    // resolve page rendered html file path
    const { htmlFilePath, htmlFilePathRelative } = (0, resolvePageHtmlInfo_1.resolvePageHtmlInfo)({
        app,
        path,
    });
    // resolve page component and extract headers & links
    const { componentFilePath, componentFilePathRelative, componentFileChunkName, } = await (0, resolvePageComponentInfo_1.resolvePageComponentInfo)({
        app,
        hoistedTags,
        htmlFilePathRelative,
        key,
    });
    const { dataFilePath, dataFilePathRelative, dataFileChunkName } = (0, resolvePageDataInfo_1.resolvePageDataInfo)({ app, htmlFilePathRelative, key });
    const page = {
        // page data
        data: {
            key,
            path,
            title,
            lang,
            frontmatter,
            excerpt,
            headers,
        },
        // base fields
        key,
        path,
        title,
        lang,
        frontmatter,
        excerpt,
        headers,
        // extra fields
        content,
        contentRendered,
        date,
        deps,
        hoistedTags,
        links,
        pathInferred,
        pathLocale,
        permalink,
        routeMeta,
        slug,
        // file info
        filePath,
        filePathRelative,
        componentFilePath,
        componentFilePathRelative,
        componentFileChunkName,
        dataFilePath,
        dataFilePathRelative,
        dataFileChunkName,
        htmlFilePath,
        htmlFilePathRelative,
    };
    // plugin hook: extendsPage
    await app.pluginApi.hooks.extendsPage.process(page, app);
    return page;
};
exports.createPage = createPage;
