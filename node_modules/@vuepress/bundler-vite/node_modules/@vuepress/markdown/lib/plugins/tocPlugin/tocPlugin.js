"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tocPlugin = void 0;
const utils_1 = require("../../utils");
const createRenderHeaders_1 = require("./createRenderHeaders");
const createTocBlockRule_1 = require("./createTocBlockRule");
/**
 * Generate table of contents
 *
 * Forked and modified from markdown-it-toc-done-right:
 *
 * - Allows `html_inline` tags in headings to support vue components
 * - Allows render `<RouterLink>` instead of `<a>` for links
 * - Code refactor and optimizations
 *
 * @see https://github.com/nagaozen/markdown-it-toc-done-right
 */
const tocPlugin = (md, { pattern = /^\[\[toc\]\]$/i, slugify = utils_1.slugify, format, level = [2, 3], containerTag = 'nav', containerClass = 'table-of-contents', listTag = 'ul', listClass = '', itemClass = '', linkTag = 'a', linkClass = '', } = {}) => {
    let headers;
    // push the rule to the end of the chain
    // resolve headers from the parsed tokens
    md.core.ruler.push('resolveTocHeaders', (state) => {
        headers = (0, utils_1.resolveHeadersFromTokens)(state.tokens, {
            level,
            allowHtml: true,
            escapeText: true,
            slugify,
            format,
        });
        return true;
    });
    // add toc syntax as a block rule
    md.block.ruler.before('heading', 'toc', (0, createTocBlockRule_1.createTocBlockRule)({
        pattern,
        containerTag,
        containerClass,
    }), {
        alt: ['paragraph', 'reference', 'blockquote'],
    });
    const renderHeaders = (0, createRenderHeaders_1.createRenderHeaders)({
        listTag,
        listClass,
        itemClass,
        linkTag,
        linkClass,
    });
    // custom toc_body render rule
    md.renderer.rules.toc_body = () => {
        /* istanbul ignore if */
        if (!headers) {
            return '';
        }
        return renderHeaders(headers);
    };
};
exports.tocPlugin = tocPlugin;
