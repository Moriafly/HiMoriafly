"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDev = void 0;
const core_1 = require("@vuepress/core");
const utils_1 = require("@vuepress/utils");
const config_1 = require("../../config");
const utils_2 = require("../../utils");
const resolveDevUserConfig_1 = require("./resolveDevUserConfig");
const watchPageFiles_1 = require("./watchPageFiles");
const watchUserConfigFile_1 = require("./watchUserConfigFile");
const log = (0, utils_1.debug)('vuepress:cli/dev');
const createDev = (defaultAppConfig) => {
    const dev = async (sourceDir = '.', commandOptions = {}) => {
        log(`commandOptions:`, commandOptions);
        if (process.env.NODE_ENV === undefined) {
            process.env.NODE_ENV = 'development';
        }
        // resolve app config from cli options
        const cliAppConfig = (0, utils_2.resolveAppConfigFromCommandOptions)(sourceDir, commandOptions);
        // resolve user config file
        const userConfigPath = commandOptions.config
            ? (0, config_1.resolveUserConfigPath)(commandOptions.config)
            : (0, config_1.resolveUserConfigConventionalPath)(cliAppConfig.source);
        log(`userConfigPath:`, userConfigPath);
        const { userConfig, userConfigDeps } = await (0, resolveDevUserConfig_1.resolveDevUserConfig)(userConfigPath);
        // create vuepress app
        const app = (0, core_1.createDevApp)({
            // allow setting default app config via `cli()`
            // for example, set different default bundler in `vuepress` and `vuepress-vite` package
            ...defaultAppConfig,
            // use cli options to override config file
            ...userConfig,
            ...cliAppConfig,
        });
        // use user-config plugin
        app.use((0, config_1.transformUserConfigToPlugin)(app, userConfig));
        // clean temp and cache
        if (commandOptions.cleanTemp === true) {
            utils_1.logger.info('Cleaning temp...');
            await utils_1.fs.remove(app.dir.temp());
        }
        if (commandOptions.cleanCache === true) {
            utils_1.logger.info('Cleaning cache...');
            await utils_1.fs.remove(app.dir.cache());
        }
        // initialize and prepare
        utils_1.logger.info('Initializing VuePress and preparing data...');
        await app.init();
        await app.prepare();
        // start dev server
        const close = await app.dev();
        // do not watch files if `watch` is set to `false`
        if (commandOptions.watch === false) {
            return;
        }
        // all watchers
        const watchers = [];
        // restart dev command
        const restart = async () => {
            await Promise.all([
                // close all watchers
                ...watchers.map((item) => item.close()),
                // close current dev server
                close(),
            ]);
            // restart dev command
            await dev(sourceDir, {
                ...commandOptions,
                // do not clean cache and temp on restart
                cleanCache: false,
                cleanTemp: false,
            });
            utils_1.logger.tip(`dev server has restarted, please refresh your browser`);
        };
        // watch page files
        watchers.push((0, watchPageFiles_1.watchPageFiles)(app));
        // watch user config file
        if (userConfigPath) {
            watchers.push(...(0, watchUserConfigFile_1.watchUserConfigFile)({
                userConfigPath,
                userConfigDeps,
                restart,
            }));
        }
        await app.pluginApi.hooks.onWatched.process(app, watchers, restart);
    };
    return dev;
};
exports.createDev = createDev;
