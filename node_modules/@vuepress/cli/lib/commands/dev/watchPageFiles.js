"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchPageFiles = void 0;
const utils_1 = require("@vuepress/utils");
const chokidar = require("chokidar");
const handlePageAdd_1 = require("./handlePageAdd");
const handlePageChange_1 = require("./handlePageChange");
const handlePageUnlink_1 = require("./handlePageUnlink");
const pageDepsHelper_1 = require("./pageDepsHelper");
/**
 * Watch page files and deps, return file watchers
 */
const watchPageFiles = (app) => {
    // watch page deps
    const depsWatcher = chokidar.watch([], {
        disableGlobbing: true,
        ignoreInitial: true,
    });
    const depsHelper = (0, pageDepsHelper_1.createPageDepsHelper)();
    const addDeps = (page) => {
        const depsToAdd = depsHelper.add(page);
        depsWatcher.add(depsToAdd);
    };
    const removeDeps = (page) => {
        const depsToRemove = depsHelper.remove(page);
        depsWatcher.unwatch(depsToRemove);
    };
    const depsListener = async (dep) => {
        const pagePaths = depsHelper.get(dep);
        if (!pagePaths)
            return;
        for (const filePathRelative of pagePaths) {
            utils_1.logger.info(`dependency of page ${utils_1.chalk.magenta(filePathRelative)} is modified`);
            await (0, handlePageChange_1.handlePageChange)(app, app.dir.source(filePathRelative));
        }
    };
    depsWatcher.on('add', depsListener);
    depsWatcher.on('change', depsListener);
    depsWatcher.on('unlink', depsListener);
    app.pages.forEach((page) => addDeps(page));
    // watch page files
    const pagesWatcher = chokidar.watch(app.options.pagePatterns, {
        cwd: app.dir.source(),
        ignoreInitial: true,
    });
    pagesWatcher.on('add', async (filePathRelative) => {
        utils_1.logger.info(`page ${utils_1.chalk.magenta(filePathRelative)} is created`);
        const page = await (0, handlePageAdd_1.handlePageAdd)(app, app.dir.source(filePathRelative));
        if (page === null)
            return;
        addDeps(page);
    });
    pagesWatcher.on('change', async (filePathRelative) => {
        utils_1.logger.info(`page ${utils_1.chalk.magenta(filePathRelative)} is modified`);
        const result = await (0, handlePageChange_1.handlePageChange)(app, app.dir.source(filePathRelative));
        if (result === null)
            return;
        const [pageOld, pageNew] = result;
        removeDeps(pageOld);
        addDeps(pageNew);
    });
    pagesWatcher.on('unlink', async (filePathRelative) => {
        utils_1.logger.info(`page ${utils_1.chalk.magenta(filePathRelative)} is removed`);
        const page = await (0, handlePageUnlink_1.handlePageUnlink)(app, app.dir.source(filePathRelative));
        if (page === null)
            return;
        removeDeps(page);
    });
    return [pagesWatcher, depsWatcher];
};
exports.watchPageFiles = watchPageFiles;
